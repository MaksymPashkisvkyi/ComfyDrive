# store/views.py
import os
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.core.mail import send_mail
from .models import Product, Category, Order, OrderItem
from .forms import OrderCreateForm
from .utils import send_telegram_message


# Helper to get cart items from session
def get_cart_products(request):
    cart = request.session.get('cart', [])  # —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä—ñ–≤
    return Product.objects.filter(id__in=cart)


# Base context processor for categories and cart count
def common_context(request):
    categories = Category.objects.all()
    cart_products = get_cart_products(request)
    return {
        'categories': categories,
        'cart_items': cart_products,
    }


# Product list view
def product_list(request):
    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π queryset
    products = Product.objects.filter(available=True)

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    category_id = request.GET.get('category')
    if category_id:
        products = products.filter(category_id=category_id)

    # –ü–æ—à—É–∫
    query = request.GET.get('q')
    if query:
        products = products.filter(title__icontains=query)

    context = common_context(request)
    context.update({'products': products})
    return render(request, 'store/product_list.html', context)


# Product detail view
def product_detail(request, product_id):
    product = get_object_or_404(Product, id=product_id, available=True)
    context = common_context(request)
    context.update({'product': product})
    return render(request, 'store/product_detail.html', context)


# Cart view (simple display)
def cart_view(request):
    cart_products = get_cart_products(request)
    context = common_context(request)
    context.update({'cart_items': cart_products})
    return render(request, 'store/cart.html', context)


# Add to cart
def add_to_cart(request, product_id):
    cart = request.session.get('cart', [])
    if product_id not in cart:
        cart.append(product_id)
    request.session['cart'] = cart
    return redirect('cart_view')


# Remove from cart
def remove_from_cart(request, product_id):
    """
    –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä —ñ–∑ —Å–µ—Å—ñ–π–Ω–æ–≥–æ –∫–æ—à–∏–∫–∞ –∑–∞ –π–æ–≥–æ ID —ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞–∑–∞–¥ —É –∫–æ—à–∏–∫.
    """
    cart = request.session.get('cart', [])
    if product_id in cart:
        cart.remove(product_id)
    request.session['cart'] = cart
    return redirect('cart_view')


def order_view(request):
    # –ó–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    categories = Category.objects.all()
    cart = request.session.get('cart', [])
    products = Product.objects.filter(id__in=cart)
    cart_items = products

    if request.method == 'POST':
        # –ó–∞–±–∏—Ä–∞—î–º–æ —ñ —á–∏—Å—Ç–∏–º–æ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        name = request.POST.get('name', '').strip()
        phone = request.POST.get('phone', '').strip()
        address = request.POST.get('address', '').strip()

        # –Ø–∫—â–æ —Ö–æ—á —è–∫–µ—Å—å –ø–æ–ª–µ –ø—É—Å—Ç–µ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ–æ—Ä–º—É –∑ –ø–æ–º–∏–ª–∫–æ—é
        if not (name and phone and address):
            messages.error(request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è —Ñ–æ—Ä–º–∏.')
            return render(request, 'store/order.html', {
                'products': products,
                'categories': categories,
                'cart_items': cart_items,
                # —â–æ–± –∑–±–µ—Ä—ñ–≥—Å—è –≤–≤–µ–¥–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ —Ç–µ–∫—Å—Ç
                'form_data': {'name': name, 'phone': phone, 'address': address},
            })

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
        product_lines = [f"- {p.title} ({p.price} ‚Ç¥)" for p in products]
        product_list = "\n".join(product_lines)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = Order.objects.create(
            name=name,
            phone=phone,
            address=address
        )
        for p in products:
            OrderItem.objects.create(order=order, product=p, price=p.price)

        # Email
        subject = "üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ComfyDrive"
        message = (
            f"üë§ –Ü–º‚Äô—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üè† –ê–¥—Ä–µ—Å–∞: {address}\n\n"
            f"üõí –¢–æ–≤–∞—Ä–∏:\n{product_list}"
        )
        send_mail(
            subject,
            message,
            os.getenv('EMAIL_HOST_USER'),
            [os.getenv('EMAIL_NOTIFICATION_RECIPIENT', os.getenv('EMAIL_HOST_USER'))],
            fail_silently=False,
        )

        # Telegram
        telegram_text = (
                f"*–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
                f"üë§ {name}\n"
                f"üìû {phone}\n"
                f"üè† {address}\n\n"
                f"üõí –¢–æ–≤–∞—Ä–∏:\n" + "\n".join(product_lines)
        )
        try:
            send_telegram_message(telegram_text)
        except Exception as e:
            print("Telegram send error:", e)

        # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —É—Å–ø—ñ—Ö
        request.session['cart'] = []
        messages.success(request, '–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.')
        return redirect('product_list')

    # GET ‚Äî –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ–æ—Ä–º—É
    return render(request, 'store/order.html', {
        'products': products,
        'categories': categories,
        'cart_items': cart_items,
        'form_data': {'name': '', 'phone': '', 'address': ''},
    })


# –¢–µ–ø–µ—Ä –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –≤‚Äô—é—Ö–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫:
def about_view(request):
    context = common_context(request)
    return render(request, 'store/about.html', context)


def contacts_view(request):
    context = common_context(request)
    return render(request, 'store/contacts.html', context)


def delivery_view(request):
    context = common_context(request)
    return render(request, 'store/delivery.html', context)
